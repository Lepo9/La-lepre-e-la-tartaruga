*********************************
30/11/2020


Prima impostazione del lavoro in base ai punti da seguire per importanza:

[decisioni collettive]
gestione gioco
  randomizzatore delle mosse
  puntate
  turni
parte grafica in console
extra
visulazizzazione grafica


Suddivisione scrittura

Funzioni:

int gettoni_vinti (int gettoni_puntati, int flag_scommessa, int flag_vincitore) 
  //restituisce in caso di vittoria il numero dei gettoni vinti

int spazi (int n) //stampa un numero n ddi spazi (utile nel disegno)

int spostamento_tarta () //restituisce quanti passi fa la tartaruga
int spostamento_lepre () //restituisce quanti passi fa la lepre

int disegno_tarta (int avanzamento_tarta) 
//in base all'avanzamento stampa la tarta sfalsata in base all'avanzamento e il traguardo
int disegno_lepre (int avanzamento_lepre) 
//in base all'avanzamento stampa la lepre sfalsata in base all'avanzamento e il traguardo


Scrittura del main
  gestione delle molteplici corse tramite cicli e variabili
  gestione del denaro tramite calcolo_vincita 
  gestione visualizzazzione tramite disegno_tarta e disegno_lepre


Proposta extra:
prima che una delle 2 arrivi a metà percorso si può aggiornare la puntata
puntando altri gettoni.

Funzionamento:
Benvenuto
Inserimento credito
ciclo 
{
  Stampa della tartaruga e lepre
  Su chi scommetti?
  Puntata
  Controllo credito
  Animazione
  Vittoria e quanto si ha vinto
  Punteggio (vittorie e sconfitte)
  Si vuole rigiocare?
}

note: 
La tartaruga e la lepre devonno essere lunghe uguali.
Alla fine ci deve essere un traguardo.
Per aspettare usare la funzione: get char.


Da decidere:
extra           Aggiustamento scommessa
passi totali    50


*********************************

01/12/2020

Funzioni aggiunte:

bool positivo (int n) //true se un numero è  positivo [Ragnoli e Betella]
int spazi (int n) [Ragnoli e Betella]
bool credito_sufficiente (int n) //true se il credito è sufficiente [Garoffoli]

Modifica funzione:

bool credito_sufficiente (int credito, int puntata) [Garoffoli]
//true se il credito è sufficiente

Suddivisione lavoro di oggi:
Leporati: Revisione e scrittura funzione   int spostamento_tarta ()
Betella: lavoro con Ragnoli causa pc 
Garoffoli: Revisione indentazione e revisione generale  e aiuto dei compagni
Ragnoli: lavoro con Betella


Funzioni scritte oggi:

bool positivo (int n)
int spostamento_tarta ()

Funzioni ancora da revisionare:
bool credito_sufficiente (int credito, int puntata)
int spazi (int n)


Aggiunta fuori dal main di:
#include <ctime>
#include <cstdlib>

Aggiunta a inizio main:
srand (time(NULL));

*********************************

02/12/2020

[Revisione collettiva]
Modifica delle funzioni: 

bool credito_sufficiente (int credito, int puntata) 
//aggiustamento indentazione, funzionamento e commento
//la funzione restituisce true se il credito è sufficiente altrimenti false

int spazi (int n) dato che non ha senso 
che venga restiutito un valore viene cambiata in
void spazi (int n)
//la funzione stampa un numero di spazi n


Scrittura delle funzioni:

int spostamento_lepre () [Leporati, Ragnoli e Garoffoli]
//la funzione genera un numero corrispondente al numero di passi che la 
//lepre deve fare tenendo conto delle probabilità

int gettoni_vinti() [Garoffoli]


Modifica e scrittura delle funzioni:

void disegno_tarta (int avanzamento_tarta, int passi_totali) [Leporati e Ragnoli]
//la funzione muove la tartaruga di avanzamento_tarta spazi e 
//disegna il traguardo i base ai passi totali che la tartaruga deve fare

void disegno_lepre (int avanzamento_lepre, int passi_totali) [Betella]
//la funzione muove la lepre di avanzamento_lepre spazi e 
//disegna il traguardo i base ai passi totali che la lepre deve fare

Sono stati usati i sguenti modelli grafici
dal sito http://www.ascii-art.de

        /\ /|
       |||| |
        \ | \
    _ _ /  @ @
  /    \  ==>X<==
/|      |   /
\|     /__| |
  \_____\ \__\

  _____     ____
 /      \  |  o |
|        |/ ___\|
|_________/
|_|_| |_|_|

*********************************

03/12/2020

Modifica delle decisioni:

I passi totali vengono portati da 50 a 100.

Aggiustamento della scommessa passa da una volta a ogni 
aggiornamento a 1 volta ogni 15 prima che una delle due 
concorrenti arrivi a metà percorso.

Ogni frame ogni 350 millisecondi.


Modifica della struttura del main:
Benvenuto.
Inserimento credito.
ciclo 
{
  Su chi scommetti?
  Quanto scommetti?
  Controllo credito.
  ciclo
  {
    Animazione della tartaruga e lepre.
    Aggiustamento puntata ogni 15 giri prima che si passi la metà.
    Controllo credito.
  }
  Vittoria e quanto si ha vinto.
  Punteggio (vittorie e sconfitte).
  Si vuole rigiocare?
}
Alla prossima/hai finito il credito.

Scrittura struttura generale del main: [Leporati, Garoffoli, Betella e Ragnoli]

Introduzione delle seguenti stringhe:
  #include <windows.h>    //libreria per sleep 
  Sleep (intervallo_fotogrammi); //la funzione aspetta intervallo_fotogrammi millisecondi
  system ("pause"); //viene richiamata la funzione pause per aspettare che l'utente abbia le regole
  system ("cls"); //viene richiamata la funzione cls per cancellare la shell

Aggiunta delle variabili:
    int credito; //credito totale
    bool flag_giocare = true; //flag per riocare
    int passi_lepre = 0, passi_tarta = 0; //contatori passi
    const int passi_totali = 100; //passi totali
    const int intervallo_fotogrammi = 350; //intervallo dei fotogrammi
    
Parti mancanti per finire il main:
  Titolo, disclamer e regole.
  Input scommessa e su chi.
  Controllo del pareggio.
  Aggiusstamento credito.
  Controllo vincita, counter vincite. 
  Output vincita e richiesta di rigioco.
  Output quando si finisce di giocare.

*********************************

04/12/2020

Parti aggiunte:
 Titolo,disclaimer e regole.
 Richiesta di rigioco.
 Input scommessa e su chi.
 Controllo del credito
 
 Variabili:
 int scommessa(gettoni)
 int scelta(0,1) (0 tartargura - 1 lepre)
 
Parti da aggiungere:
 Regola riscommessa
 
