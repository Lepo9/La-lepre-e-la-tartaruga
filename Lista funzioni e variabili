bool positivo (int n)
//se positivo restituisce valore true, se il numero è postivo altrimenti false

void spazi (int n)
//la funzione stampa un numero di spazi n (utile nel disegno)

bool credito_sufficiente (int credito, int puntata)
//la funzione restituisce true se il credito è sufficiente altrimenti false

int spostamento_tarta ()
//la funzione genera un numero corrispondente al numero di passi che la
//tartaruga deve fare tenendo conto delle probabilità

int spostamento_lepre ()
//la funzione genera un numero corrispondente al numero di passi che la
//lepre deve fare tenendo conto delle probabilita

void disegno_tarta (int avanzamento_tarta, int passi_totali)
//la funzione muove la tartaruga di avanzamento_tarta spazi e
//disegna il traguardo i base ai passi totali che la tartaruga deve fare

int credito ()
//Credito del gioco

bool giocare()
//Per controllare il giocatore vuole continuare il gioco

void disegno_lepre (int avanzamento_lepre, int passi_totali)
  //in base all'avanzamento stampa la lepre sfalsata in base all'avanzamento e il traguardo

int credito; //credito totale

bool flag_giocare = true; //flag per riocare

int passi_lepre = 0, passi_tarta = 0; //contatori passi

const int passi_totali = 100; //passi totali

const int intervallo_fotogrammi = 350; //intervallo dei fotogrammi

int puntata(int credito) //Restituisce la scommessa dell'utente e controlla se questa sia plausibile

int scelta_binaria() //Controlla se la scelta è 1 o 0

int temp //Variabile temporanea

int contagiri //Conta i giri di ogni giocata

bool flag_meta = false; //la variabile cambia in true quando la tartaruga o la lepre fanno più di 50 passi

void guadagno (int credito_finale, int credito_iniziale) //stampa quanti gettoni si ha vinto dall'inizio o si ha perso

int credito_iniziale; //è il credito che si aveva inserito all'inizio

int contatore_vittorie = 0, contatore_sconfitte = 0; //

